import { promises as fs } from 'node:fs'
import path from 'node:path'

const repoRoot = path.resolve(path.dirname(new URL(import.meta.url).pathname), '..')

async function readJSON(file) {
  const buf = await fs.readFile(file, 'utf-8')
  return JSON.parse(buf)
}

async function exists(p) {
  try {
    await fs.access(p)
    return true
  } catch {
    return false
  }
}

async function discoverPlugins() {
  const pluginsDir = path.join(repoRoot, 'packages', 'plugins')
  const entries = await fs.readdir(pluginsDir, { withFileTypes: true })
  const plugins = []
  for (const ent of entries) {
    if (!ent.isDirectory()) continue
    const pkgPath = path.join(pluginsDir, ent.name, 'package.json')
    if (!(await exists(pkgPath))) continue
    const pkg = await readJSON(pkgPath)
    const gp = pkg.grofitPlugin
    if (!gp) continue
    const id = gp.id || pkg.name || ent.name
    const entry = gp.entry ? path.join(pluginsDir, ent.name, gp.entry) : null
    const uiWidgets = (gp.ui?.widgets || []).map((w) => ({
      name: w.name,
      entry: path.join(pluginsDir, ent.name, w.entry),
      pluginId: id,
    }))
    plugins.push({
      id,
      packageName: pkg.name,
      dirName: ent.name,
      entry,
      permissions: gp.permissions || [],
      uiWidgets,
    })
  }
  return plugins
}

function toPosix(p) {
  return p.split(path.sep).join('/')
}

async function writeRuntimeRegistry(plugins) {
  const outFile = path.join(repoRoot, 'packages', 'core', 'src', 'plugins', 'registry.generated.ts')
  const outDir = path.dirname(outFile)
  await fs.mkdir(outDir, { recursive: true })
  const lines = []
  lines.push('// Auto-generated by scripts/generate-plugin-registry.mjs')
  lines.push('export type PluginDescriptor = {')
  lines.push('  id: string')
  lines.push('  packageName: string')
  lines.push('  permissions: string[]')
  lines.push('  importRegister: () => Promise<{ register: (ctx: any) => void }>')
  lines.push('}')
  lines.push('')
  lines.push('export const plugins: PluginDescriptor[] = [')
  for (const p of plugins) {
    const relImport = p.entry
      ? toPosix(path.relative(path.dirname(outFile), p.entry).replace(/\.(ts|tsx|js|jsx)$/i, ''))
      : null
    lines.push('  {')
    lines.push(`    id: ${JSON.stringify(p.id)},`)
    lines.push(`    packageName: ${JSON.stringify(p.packageName)},`)
    lines.push(`    permissions: ${JSON.stringify(p.permissions)},`)
    if (relImport) {
      // Use a variable for the import specifier to prevent TS from resolving external files into the core program (TS6059)
      lines.push('    importRegister: () => {')
      lines.push(`      const p = ${JSON.stringify(relImport)} as string`)
      lines.push('      return import(p as any) as Promise<{ register: (ctx: any) => void }>')
      lines.push('    },')
    } else {
      lines.push('    importRegister: async () => ({ register: () => {} }),')
    }
    lines.push('  },')
  }
  lines.push(']')
  await fs.writeFile(outFile, lines.join('\n'))
}

async function writeUIRegistry(plugins) {
  const outFile = path.join(
    repoRoot,
    'apps',
    'web',
    'app',
    'widgets',
    'widgetRegistry.generated.ts',
  )
  const outDir = path.dirname(outFile)
  await fs.mkdir(outDir, { recursive: true })
  const lines = []
  lines.push('// Auto-generated by scripts/generate-plugin-registry.mjs')
  lines.push("import React from 'react'")
  lines.push('')
  lines.push('export type WidgetLoader = () => Promise<{ default: React.ComponentType<any> } >')
  lines.push('export const widgetRegistry: Record<string, WidgetLoader> = {')
  // Core widgets
  lines.push(`  ${JSON.stringify('core/ActivityFeed')}: () => import('./core/ActivityFeed'),`)
  for (const p of plugins) {
    for (const w of p.uiWidgets) {
      const key = `${p.id}/${w.name}`
      const relImport = toPosix(
        path.relative(path.dirname(outFile), w.entry).replace(/\.(ts|tsx|js|jsx)$/i, ''),
      )
      lines.push(`  ${JSON.stringify(key)}: () => import(${JSON.stringify(relImport)}),`)
    }
  }
  lines.push('}')
  await fs.writeFile(outFile, lines.join('\n'))
}

async function ensureCoreActivityFeed() {
  const file = path.join(repoRoot, 'apps', 'web', 'app', 'widgets', 'core', 'ActivityFeed.tsx')
  const dir = path.dirname(file)
  await fs.mkdir(dir, { recursive: true })
  if (!(await exists(file))) {
    await fs.writeFile(
      file,
      `'use client'\n\nimport React from 'react'\n\nexport default function ActivityFeed() {\n  return (\n    <div className='space-y-2'>\n      <div className='text-sm text-neutral-400'>Activity Feed (MVP placeholder)</div>\n      <div className='rounded-md border border-neutral-800 p-3'>No items yet.</div>\n    </div>\n  )\n}\n`,
    )
  }
}

async function main() {
  const plugins = await discoverPlugins()
  await ensureCoreActivityFeed()
  await writeRuntimeRegistry(plugins)
  await writeUIRegistry(plugins)
  console.log(`Generated registries for ${plugins.length} plugins.`)
}

main().catch((err) => {
  console.error(err)
  process.exit(1)
})
